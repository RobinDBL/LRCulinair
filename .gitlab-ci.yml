# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
# image: angular/ngcontainer


stages:          # List of stages for jobs, and their order of execution
  - build
  - package

build-job:       # This job runs in the build stage, which runs first.
  image: robindbl/angular-cli
  stage: build
  artifacts:
    paths:
      - dist/*
    expire_in: 1 hour
  script:
    - echo "Compiling the code..."
    - npm install
    - ng build
    - echo "Compile complete."


variables:
  # When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:19.03.12-dind

build-docker-container:

  before_script:
    - docker info  
  image: docker:19.03.12
  stage: package
  needs: 
    - job: build-job
      artifacts: true
  script:
  - IMAGE_NAME="localhost:5000/lr-culinair:latest"
  - docker build . --tag $IMAGE_NAME
  - echo "Deploying application..."
  - docker run -itd --name lr-culinair -p 8081:80 $IMAGE_NAME
  - echo "Application successfully deployed.
